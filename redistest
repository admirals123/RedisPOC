using System;
using StackExchange.Redis;
using Azure.Identity;

class Program
{
    static async Task Main(string[] args)
    {
        Console.Write("Redis cache host name: ");
        var cacheHostName = Console.ReadLine()?.Trim();

        Console.Write("'Username' from the 'Data Access Configuration' blade on the Azure Cache for Redis resource: ");
        var username = Console.ReadLine()?.Trim();

        Console.WriteLine("Connecting using TokenCredential...");

        try
        {
            var configurationOptions = await ConfigurationOptions
                .Parse($"{cacheHostName}:6380")
                .ConfigureForAzureWithTokenCredentialAsync(username!, new DefaultAzureCredential());

            configurationOptions.AbortOnConnectFail = true; // Fail fast for the purposes of this sample. In production code, this should remain false to retry connections on startup
            
            // LogTokenEvents(configurationOptions); // You can implement this method to log token-related events if needed
            
            var connectionMultiplexer = await ConnectionMultiplexer.ConnectAsync(configurationOptions);
            
            // Use the connectionMultiplexer object to interact with Redis
            Console.WriteLine("Connected successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to Redis: {ex.Message}");
            // Handle the exception as needed
        }
    }
}
